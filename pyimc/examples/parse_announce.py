"""
Parse raw bytes into imc messages using the pybind11 interface directly.
"""

import pyimc, binascii, time

hex1 = '0004000100068086f2237d96000008004500011363dd40000111d48c0a0a0b21e0004b45e32a759400ff65ff54fe9700e100f4341be84224d641d100390000ff10006c6175762d73696d756c61746f722d3102ffffb8f392048600e73ffd0bcc8c2873c3bf8e5d07beb60064756e653a2f2f302e302e302e302f7569642f34373437383631393336313339343b64756e653a2f2f302e302e302e302f76657273696f6e2f323031372e30312e303b6674703a2f2f31302e31302e31312e33333a33303032312f3b687474703a2f2f31302e31302e31312e33333a383038302f64756e653b696d632b696e666f3a2f2f302e302e302e302f76657273696f6e2f352e342e31313b696d632b7564703a2f2f31302e31302e31312e33333a363030322f590b'
hex2 = '0004000100068086f2237d96040608004500011363de40000111d48b0a0a0b21e0004b45e32a759500ff65fe54fe9700e100f4341be84224d641d100390000ff10006c6175762d73696d756c61746f722d3102ffffb8f392048600e73ffd0bcc8c2873c3bf8e5d07beb60064756e653a2f2f302e302e302e302f7569642f34373437383631393336313339343b64756e653a2f2f302e302e302e302f76657273696f6e2f323031372e30312e303b6674703a2f2f31302e31302e31312e33333a33303032312f3b687474703a2f2f31302e31302e31312e33333a383038302f64756e653b696d632b696e666f3a2f2f302e302e302e302f76657273696f6e2f352e342e31313b696d632b7564703a2f2f31302e31302e31312e33333a363030322f590b'

bin1 = binascii.unhexlify(hex1)[44:]
bin2 = binascii.unhexlify(hex2)

parser = pyimc.Parser()
ret1 = parser.parse(bin1)
parser.reset()
ret2 = parser.parse(bin2)

print(ret1, ret2)
print(ret1.sys_name, ret1.sys_type, ret1.owner, ret1.lat, ret1.lon, ret1.height, ret1.services)
print(ret2.sys_name, ret2.sys_type, ret2.owner, ret2.lat, ret2.lon, ret2.height, ret2.services)

print(dir(ret2))
print(ret2.src, ret2.src_ent, ret2.dst, ret2.dst_ent, ret2.id, ret2.subid)

# Return to binary (44bytes missing?)
retbin1 = ret1.serialize()
print(retbin1)
print(bin1)


g = pyimc.Announce()
print(g.src, g.src_ent, g.dst, g.dst_ent, g.id, g.subid)

